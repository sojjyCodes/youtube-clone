{"version":3,"sources":["MaterialTopTabView.tsx"],"names":["React","TabView","NavigationHelpersContext","TabActions","useTheme","MaterialTopTabBar","MaterialTopTabView","pager","lazyPlaceholder","tabBar","props","tabBarOptions","state","navigation","descriptors","sceneContainerStyle","rest","colors","renderTabBar","index","dispatch","jumpTo","routes","name","target","key","route","render","emit","type","backgroundColor","background"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAA4C,uBAA5C;AACA,SACEC,wBADF,EAGEC,UAHF,EAIEC,QAJF,QAKO,0BALP;AAOA,OAAOC,iBAAP,MAA8B,qBAA9B;AAeA,eAAe,SAASC,kBAAT,OAUL;AAAA,MAViC;AACzCC,IAAAA,KADyC;AAEzCC,IAAAA,eAFyC;AAGzCC,IAAAA,MAAM,GAAIC,KAAD,iBAAmC,oBAAC,iBAAD,EAAuBA,KAAvB,CAHH;AAIzCC,IAAAA,aAJyC;AAKzCC,IAAAA,KALyC;AAMzCC,IAAAA,UANyC;AAOzCC,IAAAA,WAPyC;AAQzCC,IAAAA;AARyC,GAUjC;AAAA,MADLC,IACK;;AACR,QAAM;AAAEC,IAAAA;AAAF,MAAab,QAAQ,EAA3B;;AAEA,QAAMc,YAAY,GAAIR,KAAD,IAA+B;AAClD,WAAOD,MAAM,+CACRE,aADQ,GAERD,KAFQ;AAGXE,MAAAA,KAAK,EAAEA,KAHI;AAIXC,MAAAA,UAAU,EAAEA,UAJD;AAKXC,MAAAA,WAAW,EAAEA;AALF,OAAb;AAOD,GARD;;AAUA,sBACE,oBAAC,wBAAD,CAA0B,QAA1B;AAAmC,IAAA,KAAK,EAAED;AAA1C,kBACE,oBAAC,OAAD,eACMG,IADN;AAEE,IAAA,aAAa,EAAGG,KAAD,IACbN,UAAU,CAACO,QAAX,iCACKjB,UAAU,CAACkB,MAAX,CAAkBT,KAAK,CAACU,MAAN,CAAaH,KAAb,EAAoBI,IAAtC,CADL;AAEEC,MAAAA,MAAM,EAAEZ,KAAK,CAACa;AAFhB,OAHJ;AAQE,IAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAeZ,WAAW,CAACY,KAAK,CAACD,GAAP,CAAX,CAAuBE,MAAvB,EAR9B;AASE,IAAA,eAAe,EAAEf,KATnB;AAUE,IAAA,YAAY,EAAEM,YAVhB;AAWE,IAAA,WAAW,EAAEX,KAXf;AAYE,IAAA,qBAAqB,EAAEC,eAZzB;AAaE,IAAA,YAAY,EAAE,MAAMK,UAAU,CAACe,IAAX,CAAgB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAbtB;AAcE,IAAA,UAAU,EAAE,MAAMhB,UAAU,CAACe,IAAX,CAAgB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAdpB;AAeE,IAAA,mBAAmB,EAAE,CACnB;AAAEC,MAAAA,eAAe,EAAEb,MAAM,CAACc;AAA1B,KADmB,EAEnBhB,mBAFmB;AAfvB,KADF,CADF;AAwBD","sourcesContent":["import * as React from 'react';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport {\n  NavigationHelpersContext,\n  TabNavigationState,\n  TabActions,\n  useTheme,\n} from '@react-navigation/native';\n\nimport MaterialTopTabBar from './MaterialTopTabBar';\nimport type {\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n  MaterialTopTabBarProps,\n} from '../types';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n  tabBarPosition?: 'top' | 'bottom';\n};\n\nexport default function MaterialTopTabView({\n  pager,\n  lazyPlaceholder,\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  tabBarOptions,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...tabBarOptions,\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <TabView\n        {...rest}\n        onIndexChange={(index) =>\n          navigation.dispatch({\n            ...TabActions.jumpTo(state.routes[index].name),\n            target: state.key,\n          })\n        }\n        renderScene={({ route }) => descriptors[route.key].render()}\n        navigationState={state}\n        renderTabBar={renderTabBar}\n        renderPager={pager}\n        renderLazyPlaceholder={lazyPlaceholder}\n        onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n        onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n        sceneContainerStyle={[\n          { backgroundColor: colors.background },\n          sceneContainerStyle,\n        ]}\n      />\n    </NavigationHelpersContext.Provider>\n  );\n}\n"]}